<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<configuration status="ALL" monitorInterval="30">

    <Properties>
        <Property name="pattern">%d{yyyy-MM-dd HH:mm:ss,SSS} %t %level %C:%M() %m%n</Property>
        <Property name="displayName">web</Property>
        <Property name="logstash">%m%n</Property>
    </Properties>
    <!--先定义所有的appender-->
    <appenders>
        <!--这个输出控制台的配置-->
        <console name="Console" target="SYSTEM_OUT">
            <!--输出日志的格式-->
            <!--<PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>-->
            <PatternLayout>
                <pattern>${pattern}</pattern>
            </PatternLayout>
        </console>
        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用-->
        <File name="log" fileName="${sys:user.home}/logs/test.log" append="false">
            <!--<PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>-->
            <PatternLayout>
                <pattern>${pattern}</pattern>
            </PatternLayout>
        </File>
        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <!-- 不管是同步异步，都设置immediateFlush为false(默认为true，立即输出，不会缓冲)，这会对性能提升有很大帮助，
            设置为false会提升5倍吞吐量左右，可以根据BufferSize值调整缓冲池大小，默认8Kb，
            如果程序意外退出，缓冲区内的日志不会输出 ，这种情况可以使用JVM关闭的回调功能，捕获关闭事件，
            然后调用LogManager.shutdown()输出缓冲区中的日志。 -->
        <!--<RollingRandomAccessFile   name="RollingFile" fileName="${sys:user.home}/logs/info.log"-->
        <RollingFile  name="RollingFile" fileName="${sys:user.home}/logs/info.log"
                      filePattern="${sys:user.home}/logs/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log"
                      immediateflush="true">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）
                    DENY，日志将立即被抛弃不再经过其他过滤器；NEUTRAL，有序列表里的下个过滤器过接着处理日志；
                    ACCEPT，日志会被立即处理，不再经过剩余过滤器-->
            <!--<ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>-->
            <!--<PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>-->
            <PatternLayout>
                <pattern>${pattern}</pattern>
            </PatternLayout>
            <!--<bufferSize byteBuffer="1024"/>-->
            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->
            <!--            <FileNamePattern>log/info/info.%d{yyyy-MM-dd}.log</FileNamePattern>-->
            <!--只保留最近90天的日志 -->
            <maxHistory>90</maxHistory>
            <Policies>
                <!--interval属性用来指定多久滚动一次，默认是1 hour-->
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="10 KB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->
            <DefaultRolloverStrategy max="20"/>
            <!--删除策略 -->
            <DefaultRolloverStrategy max="30">
                <!-- 删除处理策略，在配置的路径中搜索，maxDepth 表示往下搜索的最大深度 -->
                <Delete basePath="${sys:user.home}/logs/info/" maxDepth="2">
                    <!-- 文件名搜索匹配，支持正则 -->
                    <IfFileName glob="*.log.gz" />
                    <!--!Note: 这里的 age 必须和 filePattern 协调, 后者是精确到 dd, 这里就要写成 xd, xD 就不起作用
                    另外, 数字最好 >2, 否则可能造成删除的时候, 最近的文件还处于被占用状态,导致删除不成功!-->
                    <!--7天-->
                    <IfLastModified age="7d" />
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile >

        <!--<Async name="Async">-->
        <!--    <AppenderRef ref="RollingFile"/>-->
        <!--</Async>-->
    </appenders>

    <!--Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。-->
    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>
        !--监控系统信息-->
        <!--若是additivity设为false，则 子Logger 只会在自己的appender里输出，而不会在 父Logger 的appender里输出。-->
        <!--<Logger name="org.springframework" level="info" additivity="false">-->
        <!--    <AppenderRef ref="Console"/>-->
        <!--</Logger>-->
        <!--Console日志是同步、阻塞的，推荐只在本地调试时使用，线上将该配置去掉-->
        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <logger name="org.springframework" level="debug"></logger>
        <logger name="org.mybatis" level="INFO"></logger>
        <root level="all">
            <appender-ref ref="Console"/>
            <!--<appender-ref ref="log"/>-->
            <!--<AsyncAppender ref="Async"/>-->
            <!--<appender-ref ref="RollingFile"/>-->
        </root>
        <!--若是 additivity 设为 false，则子 Logger 只会在自己的 appender 里输出，而不会在父 Logger 的 appender 里输出。-->
        <!--Console、RollingFileInfo 没有配置 ThresholdFilter，默认走的是 AsyncRoot 的 level 级别，
            com.songo.mapper 为我项目 mapper 的包路径，级别设为 debug，可以打印 sql 语句-->
        <!--<AsyncLogger name="com.songo.mapper" level="debug" additivity="false">-->
        <!--    <appender-ref ref="Console"/>-->
        <!--    <appender-ref ref="RollingFileInfo"/>-->
        <!--</AsyncLogger>-->
        <AsyncRoot level="all" includeLocation="true">
            <AppenderRef ref="RollingFile" />
        </AsyncRoot>
    </loggers>
</configuration>